name: Data Quality Monitoring

on:
  schedule:
    # Run daily at 9 AM UTC
    - cron: '0 9 * * *'
  
  # Run on push to main branch
  push:
    branches: [ main, develop ]
  
  # Run on pull requests
  pull_request:
    branches: [ main ]
  
  # Manual trigger
  workflow_dispatch:

jobs:
  data-quality-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd backend
        npm ci
        
    - name: Setup database
      run: |
        cd backend
        # Add your database setup commands here
        # Example: docker-compose up -d postgres
        echo "Database setup completed"
        
    - name: Run data quality monitoring
      run: |
        cd backend
        npx ts-node run-monitoring.ts
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        
    - name: Check monitoring results
      run: |
        cd backend
        # Check if monitoring passed (exit code 0 = success)
        npx ts-node run-monitoring.ts quick
        if [ $? -eq 0 ]; then
          echo "✅ Data quality check passed"
        else
          echo "❌ Data quality check failed"
          exit 1
        fi
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        
    - name: Generate monitoring report
      if: always()
      run: |
        cd backend
        npx ts-node run-monitoring.ts metrics > monitoring-report.txt
        echo "📊 Monitoring report generated"
        
    - name: Upload monitoring report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: data-quality-report
        path: backend/monitoring-report.txt
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('backend/monitoring-report.txt', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 🔍 Data Quality Check Results\n\n\`\`\`\n${report}\n\`\`\`\n\nThis check was automatically generated by the data quality monitoring system.`
          });

  alert-on-failure:
    needs: data-quality-check
    if: failure()
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd backend
        npm ci
        
    - name: Generate detailed failure report
      run: |
        cd backend
        npx ts-node run-monitoring.ts > failure-report.txt
        echo "📋 Detailed failure report generated"
        
    - name: Upload failure report
      uses: actions/upload-artifact@v4
      with:
        name: failure-report
        path: backend/failure-report.txt
        
    - name: Send Slack notification (optional)
      if: secrets.SLACK_WEBHOOK_URL
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        text: |
          🚨 Data Quality Check Failed!
          
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          
          Check the failure report for details.
          
    - name: Send email notification (optional)
      if: secrets.EMAIL_SMTP_HOST
      run: |
        echo "Sending email notification..."
        # Add your email notification logic here
        # Example: using sendmail or SMTP client
